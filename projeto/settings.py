"""
Django settings for projeto project.
Generated by 'django-admin startproject' using Django 3.2.9.
Para mais informações sobre este arquivo, veja:
https://docs.djangoproject.com/en/3.2/topics/settings/
Para a lista completa de configurações e seus valores, veja:
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from pathlib import Path

# Define o caminho base do projeto (onde está o arquivo manage.py).
BASE_DIR = Path(__file__).resolve().parent.parent

# Configurações rápidas de desenvolvimento - não adequadas para produção.
# Veja https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# AVISO DE SEGURANÇA: mantenha a chave secreta usada em produção em segredo!
SECRET_KEY = 'django-insecure-xl11#if5xm5%b0col9fa57xv+o6z(0wl0*22e2gm)td4mk)q8e'

# AVISO DE SEGURANÇA: não execute com debug ativado em produção!
DEBUG = True  # Definido como True durante o desenvolvimento; deve ser False em produção.

# Lista de hosts permitidos para o projeto.
ALLOWED_HOSTS = []

# Definição de aplicativos instalados (apps que o projeto utiliza).
INSTALLED_APPS = [
    'django.contrib.admin',  # Interface de administração do Django.
    'django.contrib.auth',  # Sistema de autenticação.
    'django.contrib.contenttypes',  # Framework para tipos de conteúdo.
    'django.contrib.sessions',  # Gerenciamento de sessões.
    'django.contrib.messages',  # Sistema de mensagens.
    'django.contrib.staticfiles',  # Gerenciamento de arquivos estáticos (CSS, JS, etc.).
    # Apps criados pelo desenvolvedor
    'recipes',  # App 'recipes' que contém a lógica principal de receitas.
]

# Middleware (camadas intermediárias que processam solicitações e respostas).
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Middleware de segurança.
    'django.contrib.sessions.middleware.SessionMiddleware',  # Gerenciamento de sessões.
    'django.middleware.common.CommonMiddleware',  # Processa solicitações comuns.
    'django.middleware.csrf.CsrfViewMiddleware',  # Protege contra ataques CSRF.
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Middleware de autenticação.
    'django.contrib.messages.middleware.MessageMiddleware',  # Middleware de mensagens.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Proteção contra "clickjacking".
]

# URL principal do projeto.
ROOT_URLCONF = 'projeto.urls'

# Configurações de templates.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # Usa o sistema de templates do Django.
        'DIRS': [
            BASE_DIR / 'base_templates',  # Diretório personalizado para templates.
            BASE_DIR / 'recipes' / 'templates_temp'  # Outro diretório de templates específicos do app 'recipes'.
        ],
        'APP_DIRS': True,  # Carrega templates dos diretórios dos apps automaticamente.
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Processador de contexto para depuração.
                'django.template.context_processors.request',  # Processador de contexto para objetos de requisição.
                'django.contrib.auth.context_processors.auth',  # Processador de contexto para autenticação.
                'django.contrib.messages.context_processors.messages',  # Processador de contexto para mensagens.
            ],
        },
    },
]

# Aplicação WSGI (usada para implantar o projeto).
WSGI_APPLICATION = 'projeto.wsgi.application'

# Configurações de banco de dados.
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Usa o banco de dados SQLite.
        'NAME': BASE_DIR / 'db.sqlite3',  # Caminho para o arquivo de banco de dados.
    }
}

# Validação de senha (regras para criação de senhas).
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Valida similaridade com atributos de usuário.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Valida comprimento mínimo da senha.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Valida se a senha é comum.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # Valida se a senha contém apenas números.
    },
]

# Configurações de internacionalização (idioma, fuso horário).
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = 'en-us'  # Define o idioma como inglês americano.
TIME_ZONE = 'UTC'  # Define o fuso horário como UTC.
USE_I18N = True  # Habilita a internacionalização.
USE_L10N = True  # Habilita formatação local.
USE_TZ = True  # Habilita suporte a fusos horários.

# Arquivos estáticos (CSS, JavaScript, Imagens).
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'  # URL onde os arquivos estáticos serão servidos.
STATICFILES_DIRS = [
    BASE_DIR / 'base_static',  # Diretório personalizado para arquivos estáticos.
]
STATIC_ROOT = BASE_DIR / 'static'  # Diretório onde os arquivos estáticos serão coletados para produção.

# Tipo de campo padrão para chaves primárias.
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Define o tipo padrão de campo para chaves primárias.